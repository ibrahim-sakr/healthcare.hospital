/*
 * Parent Module that contains all shred functions
 */
var db 			= require('DB.Modules/Database'),
	Pagination 	= require('Pagination');

function PModule(){
	this.all = function(limit, cb){
		var table = this.table,
			total = "SELECT COUNT(id) AS count FROM " + table;
		db.db().query(total, function(err, rows, fields){
			if (err) throw err;
			var limt = typeof limit === 'number' ? limit : rows[0].count,
				sql = "SELECT * FROM " + table + " " + Pagination.paginate(rows[0].count, limt);
			db.db().query(sql, function(err, rows, fields){
				opt = {
					rows: rows,
					links: Pagination.getLinks()
				}
				return cb(opt);
			});
		});
	};
	this.find = function(id, cb){
		if (typeof id === "number") {
			var sql = "SELECT * FROM "+ this.table +" WHERE id = " + db.db().escape(id);
			db.db().query(sql, function(err, rows, fields){
				return cb(rows);
			});
		} else {
			return cb("failed");
		};
	};
	this.where = function(data, limit, cb){
		var table = this.table,
			total = "SELECT COUNT(id) AS count FROM " + table +" WHERE "+ data;

		db.db().query(total, function(err, rows, fields){
			if (err) throw err;
			var limt = typeof limit === 'number' ? limit : rows[0].count,
				sql = "SELECT * FROM "+ table +" WHERE "+ data + " " + Pagination.paginate(rows[0].count, limt);

			// console.log(sql);
			db.db().query(sql, function(err, rows, fields){
				if (err) throw err;
				opt = {
					rows: rows,
					links: Pagination.getLinks()
				}
				return cb(opt);
			});
		});
	};
	this.create = function(obj, cb){
		var sql = "INSERT INTO "+ this.table +" SET ?";
		db.db().query(sql, obj, function(err, result){
			if (err) throw err;
			return cb(result.insertId);
		});
	};
	this.update = function(id, obj, cb){
		var sql = "UPDATE "+ this.table +" SET ? WHERE id = "+ db.db().escape(id);
		db.db().query(sql, obj, function(err, result){
			if (err) throw err;
			return cb(result.affectedRows);
		});
	};
	this.softDelete = function(id, cb){
		if (typeof id === "number") {
			var sql = "UPDATE "+ this.table +" SET deleted = 1 WHERE id = " + db.db().escape(id);
			db.db().query(sql, function(err, result){
				if (err) throw err;
				return cb( result.affectedRows );
			});
		};
	};
	this.delete = function(id, cb){
		if (typeof id === "number") {
			var sql = "DELETE FROM "+ this.table +" WHERE id = " + db.db().escape(id);
			db.db().query(sql, function(err, result){
				if (err) throw err;
				return cb( result.affectedRows );
			});
		};
	};
	this.global = function(sql, data, cb){
		db.db().query(sql, data, function(err, rows, fields){
			if (err) throw err;
			return cb(rows);
		});
	},









	/*
	 * New APIs
	 */
	this.sql = "",
	this.newAll = function(){
		this.sql += "SELECT * FROM "+ this.table;
	}
	this.newWith = function(joinTable){
		this.sql += " LEFT JOIN "+ joinTable +" ON "+ this.table +"."+ joinTable +"_id = "+ joinTable +".id";
	}
	this.newQuery = function(cb){
		db.db().query(this.sql, function(err, rows, fields){
			if (err) throw err;
			return cb(rows);
			this.sql = "";
		});
	}


	/*
	 * Helper Methods
	 */
	this.currentDateTime = function(){ // current datetime for database
		var dt = new Date();
		return dtstring = dt.getFullYear()
			+ '-' + this.pad(dt.getMonth()+1, 2)
			+ '-' + this.pad(dt.getDate(), 2)
			+ ' ' + this.pad(dt.getHours(), 2)
			+ ':' + this.pad(dt.getMinutes(), 2)
			+ ':' + this.pad(dt.getSeconds(), 2);
	},
	this.currentTime = function(){ // current datetime for database
		var dt = new Date();
		return dtstring = this.pad(dt.getHours(), 2)
			+ ':' + this.pad(dt.getMinutes(), 2)
			+ ':' + this.pad(dt.getSeconds(), 2);
	},
	this.currentDate = function(){ // current datetime for database
		var dt = new Date();
		return dtstring = dt.getFullYear()
			+ '-' + this.pad(dt.getMonth()+1, 2)
			+ '-' + this.pad(dt.getDate(), 2);
	},
	this.pad = function(number, length) { // leading numbers with zeros
		var str = '' + number;
		while (str.length < length) {
			str = '0' + str;
		}
		return str;
	}
}
module.exports = PModule;
