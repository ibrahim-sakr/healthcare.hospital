
/*
 * Dependencies
 */

(function() {
  var Config, DecompressZip, dfd, exec, fs, tar, zlib;

  Config = require('./config');

  fs = require('fs');

  dfd = require('jquery-deferred').Deferred;

  DecompressZip = require('decompress-zip');

  tar = require('tar');

  exec = require('child_process').exec;

  zlib = require("zlib");


  /*
   * Utils definition
   */

  module.exports = {

    /*
    	 * Unzip input into output.
    	 * Uses native unzip on osx and js implementation on linux and win
    	 *
    	 * @param {String} input
    	 * @param {String} output
    	 * @return {Promise}
    	 * @api private
     */
    unzip: function(input, output) {
      var unzip, unzipDeferred;
      if (!input) {
        throw new Error("No input file specifed");
      }
      if (!output) {
        throw new Error("No ouput folder specified");
      }
      unzipDeferred = dfd();
      if (Config.platform === 'osx') {
        exec("unzip -o '" + input + "' -d '" + output + "'", {
          cwd: output
        }, (function(_this) {
          return function(err) {
            if (err) {
              return unzipDeferred.rejectWith(_this, [err]);
            }
            return unzipDeferred.resolveWith(_this);
          };
        })(this));
      } else {
        unzip = new DecompressZip(input);
        unzip.on('error', (function(_this) {
          return function(err) {
            return unzipDeferred.rejectWith(_this, [err]);
          };
        })(this));
        unzip.on('extract', (function(_this) {
          return function() {
            return unzipDeferred.resolveWith(_this);
          };
        })(this));
        unzip.extract({
          path: output
        });
      }
      return unzipDeferred.promise();
    },

    /*
    	 * Untar input into output.
    	 * Uses native tar on osx and linux and js implementation on win
    	 *
    	 * @param {String} input
    	 * @param {String} output
    	 * @return {Promise}
    	 * @api private
     */
    untar: function(input, output) {
      var src, untarDeferred, _ref;
      untarDeferred = dfd();
      if (!input) {
        throw new Error("No input file specifed");
      }
      if (!output) {
        throw new Error("No ouput folder specified");
      }
      if ((_ref = Config.platform) === 'osx' || _ref === 'linux') {
        exec("tar -xf '" + input + "'", {
          cwd: output
        }, (function(_this) {
          return function(err) {
            if (err) {
              return untarDeferred.rejectWith(_this, [err]);
            }
            return untarDeferred.resolveWith(_this);
          };
        })(this));
      } else {
        src = fs.createReadStream(input);
        src.pipe(zlib.createGunzip()).pipe(tar.Extract({
          path: output
        })).on('end', (function(_this) {
          return function() {
            return untarDeferred.resolveWith(_this);
          };
        })(this)).on('error', (function(_this) {
          return function(err) {
            return untarDeferred.rejectWith(_this, [err]);
          };
        })(this));
      }
      return untarDeferred.promise();
    }
  };

}).call(this);
