
/*
 * Dependencies
 */

(function() {
  var Emitter, PubSubSocket, SnapshotClient, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Emitter = require('events').EventEmitter;

  fs = require('fs');

  PubSubSocket = require('./pubsub.js');


  /*
   * SnapshotClient class definition
   */

  module.exports = SnapshotClient = (function(_super) {
    __extends(SnapshotClient, _super);


    /*
    	 * Constructs the class.
    	 *
    	 * @param {string} nwVersion
    	 * @param {(string|Buffer)} appSource
    	 * @param {(string|Buffer)} snapshotSource
    	 * @returns {SnapshotClient}
    	 * @api private
     */

    function SnapshotClient(nwVersion, appSource, snapshotSource) {
      if (!nwVersion) {
        throw new Error("missing nwVersion parameter");
      }
      if (!appSource) {
        throw new Error("missing appSource parameter");
      }
      if (!snapshotSource) {
        throw new Error("missing snapshotSource parameter");
      }
      this.nwVersion = nwVersion;
      if (typeof appSource === 'string' && fs.existsSync(appSource)) {
        this.appSource = fs.readFileSync(appSource);
      } else if (appSource instanceof Buffer) {
        this.appSource = appSource;
      } else {
        throw new Error('appSource parameter should be a buffer or a valid (existing) filepath.');
      }
      if (typeof snapshotSource === 'string' && fs.existsSync(snapshotSource)) {
        this.snapshotSource = fs.readFileSync(snapshotSource);
      } else if (snapshotSource instanceof Buffer) {
        this.snapshotSource = snapshotSource;
      } else {
        throw new Error('snapshotSource parameter should be a buffer or a valid (existing) filepath.');
      }
      this.connected = false;
    }


    /*
    	 * Connects to the build server
    	 *
    	 * @param {(string|Number)} - If only a number is given address is assumed to be a port on localhost.
    	 * @param {Function} callback - called when connected
    	 * @returns {void}
    	 * @api public
     */

    SnapshotClient.prototype.connect = function(address, callback) {
      if (typeof address !== 'string') {
        address = 'tcp://127.0.0.1:' + address;
      }
      this.socket = new PubSubSocket();
      this.socket.connect(address);
      this.socket.on('connect', (function(_this) {
        return function() {
          _this.connected = true;
          return typeof callback === "function" ? callback() : void 0;
        };
      })(this));
      this.socket.on('message', (function(_this) {
        return function() {
          if (arguments[0].toString() === 'done') {
            return _this.emit('done', arguments[1], arguments[2].toString());
          } else {
            return _this.emit(arguments[0].toString(), arguments[1].toString(), arguments[2].toString());
          }
        };
      })(this));
      return this.socket.on('close', (function(_this) {
        return function() {
          return _this.connected = false;
        };
      })(this));
    };


    /*
    	 * Tells the buildserver to start compiling the snapshot, and disconnects when it's done.
    	 *
    	 * @param {Number} iterations - how many times to try compiling before giving up.
    	 * @returns {void}
    	 * @api public
     */

    SnapshotClient.prototype.build = function(iterations) {
      if (!this.connected) {
        throw new Error("Not connected to build server");
      }
      this.socket.send(this.nwVersion, this.appSource, this.snapshotSource, iterations + '');
      return this.socket.on('message', (function(_this) {
        return function(type) {
          if (type === 'done' || type === 'fail') {
            return _this.disconnect();
          }
        };
      })(this));
    };


    /*
    	 * Disconnects from the buildserver.
    	 *
    	 * @returns {void}
    	 * @api public
     */

    SnapshotClient.prototype.disconnect = function() {
      var sock, _i, _len, _ref;
      this.socket.removeAllListeners();
      this.removeAllListeners();
      this.socket.close();
      _ref = this.socket.socks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        sock = _ref[_i];
        sock.end();
        sock.destroy();
        sock.unref();
      }
      return this.connected = false;
    };

    return SnapshotClient;

  })(Emitter);

}).call(this);
