
/*
 * Dependencies
 */

(function() {
  var Config, NodeWebkitDownloader, Utils, dfd, fs, mkdirp, path, request, rimraf;

  Config = require('./config');

  Utils = require('./utils');

  path = require('path');

  fs = require('fs');

  dfd = require('jquery-deferred').Deferred;

  rimraf = require('rimraf');

  mkdirp = require('mkdirp');

  request = require('request');


  /*
   * NodeWebkitDownloader Class definition
   */

  module.exports = NodeWebkitDownloader = (function() {
    NodeWebkitDownloader.prototype.binFolder = "bin";


    /*
    	 * Constructor for the class that configures which version, platform and 
    	 * architecture to use.
    	 * You can omit the platform and arch arguments and the instance will just 
    	 * default to the current platform and architecture.
    	 *
    	 * @param {Object} version
    	 * @param {String} [platform]
    	 * @param {String} [arch]
    	 * @return {NodeWebkitDownloader}
    	 * @api private
     */

    function NodeWebkitDownloader(version, platform, arch) {
      var _ref, _ref1, _ref2;
      this.version = version;
      this.platform = platform != null ? platform : Config.platform;
      this.arch = arch != null ? arch : Config.arch;
      if (!this.version) {
        throw new Error("No version specified");
      }
      if ((_ref = this.platform) !== 'win' && _ref !== 'osx' && _ref !== 'linux') {
        throw new Error("Platform must be one of 'osx', 'linux' or 'win'");
      }
      if ((_ref1 = this.arch) !== 'ia32' && _ref1 !== 'x64') {
        throw new Error("Arch must be one of 'ia32' or 'x64'");
      }
      if (((_ref2 = this.platform) === 'win' || _ref2 === 'osx') && this.arch !== 'ia32') {
        throw new Error("Only ia32 is supported on osx and windows");
      }
      if (Config.platform === 'win' && this.platform === 'linux') {
        throw new Error("Extracting for linux on windows is unsupported at the moment. See: https://github.com/miklschmidt/node-nw-snapshot/issues/3");
      }
    }


    /*
    	 * Returns the remote URL for the node-webkit archive.
    	 *
    	 * @return {String}
    	 * @api public
     */

    NodeWebkitDownloader.prototype.getDownloadURL = function() {
      var extension, frags, major, minor;
      extension = this.platform === 'linux' ? 'tar.gz' : 'zip';
      frags = this.version.split('-')[0].split('.');
      major = parseInt(frags[0]);
      minor = parseInt(frags[1]);
      if (major === 0 && minor < 8) {
        return "" + Config.oldDownloadURL + "/v" + this.version + "/node-webkit-v" + this.version + "-" + this.platform + "-" + this.arch + "." + extension;
      } else {
        return "" + Config.newDownloadURL + "/v" + this.version + "/node-webkit-v" + this.version + "-" + this.platform + "-" + this.arch + "." + extension;
      }
    };


    /*
    	 * Returns the local path to the directory where the node-webkit 
    	 * distribution resides (or will be extracted to).
    	 *
    	 * @return {String}
    	 * @api public
     */

    NodeWebkitDownloader.prototype.getLocalPath = function() {
      return path.join(__dirname, '..', this.binFolder, this.version, "" + this.platform + "-" + this.arch);
    };


    /*
    	 * Returns the subfolder of the zip where the files are located, if it exists.
    	 * In 0.10.0 node-webkit switched their win and osx zip structure to match the linux ones.
    	 *
    	 * @return {String}
    	 * @api public
     */

    NodeWebkitDownloader.prototype.getZipSubFolder = function() {
      var frags, major, minor;
      frags = this.version.split('-')[0].split('.');
      major = parseInt(frags[0]);
      minor = parseInt(frags[1]);
      if (this.platform === 'linux' || (major === 0 && minor > 9) || (major > 0)) {
        return "node-webkit-v" + this.version + "-" + this.platform + "-" + this.arch;
      } else {
        return "";
      }
    };


    /*
    	 * Returns the local path to the snapshot binary.
    	 * NOTE: The binary might not exist, see verifyBinaries().
    	 *
    	 * @return {String}
    	 * @api public
     */

    NodeWebkitDownloader.prototype.getSnapshotBin = function() {
      var folder, snapshotExecutable;
      snapshotExecutable = this.platform === 'win' ? 'nwsnapshot.exe' : 'nwsnapshot';
      folder = this.getZipSubFolder();
      return path.join(this.getLocalPath(), folder, snapshotExecutable);
    };


    /*
    	 * Returns the local path to the node-webkit binary.
    	 * NOTE: The binary might not exist, see verifyBinaries().
    	 *
    	 * @return {String}
    	 * @api public
     */

    NodeWebkitDownloader.prototype.getNwBin = function() {
      var folder;
      folder = this.getZipSubFolder();
      switch (this.platform) {
        case 'win':
          return path.join(this.getLocalPath(), folder, 'nw.exe');
        case 'osx':
          return path.join(this.getLocalPath(), folder, 'node-webkit.app', 'Contents', 'MacOS', 'node-webkit');
        case 'linux':
          return path.join(this.getLocalPath(), folder, 'nw');
      }
    };


    /*
    	 * Downloads the node-webkit archive.
    	 *
    	 * @return {Promise}
    	 * @api private
     */

    NodeWebkitDownloader.prototype.download = function() {
      var destinationFile, downloadDeferred, filename, handleError, url;
      downloadDeferred = dfd();
      url = this.getDownloadURL();
      filename = url.split('/').slice(-1)[0];
      destinationFile = path.join(this.getLocalPath(), filename);
      handleError = (function(_this) {
        return function(err) {
          return downloadDeferred.rejectWith(_this, [err]);
        };
      })(this);
      if (fs.existsSync(destinationFile)) {
        downloadDeferred.resolveWith(this, [destinationFile]);
      } else {
        mkdirp(this.getLocalPath(), (function(_this) {
          return function(err) {
            var destinationStream, req, reqObj;
            if (err) {
              handleError(err);
            }
            destinationStream = fs.createWriteStream(destinationFile);
            reqObj = {
              url: url
            };
            if (process.env.http_proxy != null) {
              reqObj.proxy = process.env.http_proxy;
            }
            req = request(reqObj);
            destinationStream.on('error', handleError);
            req.on('error', handleError);
            destinationStream.on('close', function() {
              return downloadDeferred.resolveWith(_this, [destinationFile]);
            });
            req.on('response', function(response) {
              if (response.statusCode !== 200) {
                destinationStream.end();
                return rimraf(_this.getLocalPath(), function(err) {
                  if (err) {
                    downloadDeferred.rejectWith(_this, [err]);
                  }
                  return downloadDeferred.rejectWith(_this, [new Error("Bad response (code " + response.statusCode + ". The version you requested (" + _this.version + ") probably doesn't exist.")]);
                });
              }
            });
            return req.pipe(destinationStream);
          };
        })(this));
      }
      return downloadDeferred.promise();
    };


    /*
    	 * Deletes the directory where the node-webkit distribution resides.
    	 *
    	 * @return {Promise}
    	 * @api public
     */

    NodeWebkitDownloader.prototype.cleanVersionDirectoryForPlatform = function() {
      var cleanDeferred;
      cleanDeferred = dfd();
      rimraf(this.getLocalPath(), (function(_this) {
        return function(err) {
          if (err) {
            return cleanDeferred.rejectWith(_this, [err]);
          }
          return cleanDeferred.resolveWith(_this);
        };
      })(this));
      return cleanDeferred.promise();
    };


    /*
    	 * Extracts the node-webkit archive.
    	 *
    	 * @param {String} input
    	 * @param {String} output
    	 * @return {Promise}
    	 * @api private
     */

    NodeWebkitDownloader.prototype.extract = function(input, output) {
      var extractDeferred;
      if (output == null) {
        output = this.getLocalPath();
      }
      extractDeferred = dfd();
      if (!fs.existsSync(input)) {
        return extractDeferred.rejectWith(this, [new Error("The specified input file '" + input + "' does not exist")]);
      }
      mkdirp(output, (function(_this) {
        return function(err) {
          var extractMethod;
          if (err) {
            return extractDeferred.rejectWith(_this, [err]);
          }
          if (path.extname(path.basename(input, '.gz')) === '.tar') {
            extractMethod = Utils.untar;
          } else if (path.extname(input) === '.zip') {
            extractMethod = Utils.unzip;
          } else {
            extractDeferred.rejectWith(_this, [new Error("Unknown extension " + (path.extname(input)))]);
          }
          if (extractMethod) {
            return extractMethod(input, output).done(function() {
              return extractDeferred.resolveWith(_this);
            }).fail(function(err) {
              return extractDeferred.rejectWith(_this, [err]);
            });
          } else {
            return extractDeferred.rejectWith(_this, [new Error("No extract method")]);
          }
        };
      })(this));
      extractDeferred.always(function() {
        return fs.unlinkSync(input);
      });
      return extractDeferred.promise();
    };


    /*
    	 * Verifies that the nw and nwsnapshot binaries exist.
    	 *
    	 * @return {Boolean}
    	 * @api public
     */

    NodeWebkitDownloader.prototype.verifyBinaries = function() {
      return fs.existsSync(this.getSnapshotBin()) && fs.existsSync(this.getNwBin());
    };


    /*
    	 * Ensures that the node-webkit distribution is available for use.
    	 *
    	 * @return {Promise}
    	 * @api public
     */

    NodeWebkitDownloader.prototype.ensure = function() {
      var ensureDeferred;
      ensureDeferred = dfd();
      this.versionExists = fs.existsSync(this.getLocalPath());
      if (this.versionExists && this.verifyBinaries()) {
        ensureDeferred.resolveWith(this, [this.getSnapshotBin(), this.getNwBin()]);
      } else {
        this.cleanVersionDirectoryForPlatform().then(this.download).then(this.extract).done(function() {
          if (this.verifyBinaries()) {
            return ensureDeferred.resolveWith(this, [this.getSnapshotBin(), this.getNwBin()]);
          } else {
            return ensureDeferred.rejectWith(this, [new Error("The expected binaries couldn't be found in the downloaded archive.")]);
          }
        }).fail(function(err) {
          return ensureDeferred.rejectWith(this, [err]);
        });
      }
      return ensureDeferred.promise();
    };

    return NodeWebkitDownloader;

  })();

}).call(this);
