
/*
 * Dependencies
 */

(function() {
  var Config, PubSubSocket, Snapshot, express;

  Config = require("./config");

  Snapshot = require("./snapshot");

  PubSubSocket = require("./pubsub");

  express = require('express');


  /*
   * Server definition
   */

  module.exports = {
    http: null,
    socket: null,
    app: null,
    start: function() {
      var that;
      this.socket = new PubSubSocket;
      that = this;
      this.socket.on('message', function(nwVersion, appSourceNw, snapshotSource, iterations) {
        Snapshot.config({
          nwVersion: nwVersion.toString(),
          appSourceNw: appSourceNw,
          snapshotSource: snapshotSource,
          iterations: parseInt(iterations)
        });
        return Snapshot.prepare().then(Snapshot.run).progress(function(status, tries) {
          return that.socket.send('progress', status.toString(), tries.toString());
        }).fail(function(err, tries) {
          return that.socket.send('fail', err.toString(), (tries != null ? tries.toString() : void 0) || '0');
        }).done(function(snapshot, tries) {
          return that.socket.send('done', snapshot, tries.toString());
        }).always(function() {
          return Snapshot.resetState();
        });
      });
      this.socket.bind(Config.sockPort, Config.hostIP);
      this.app = express();
      this.app.get('/callback/:id', function(req, res) {
        res.header('Cache-Control', 'no-cache, private, no-store, must-revalidate, max-stale=0, post-check=0, pre-check=0');
        res.header('Expires', 'Fri, 31 Dec 1998 12:00:00 GMT');
        Snapshot.notify(req.params.id);
        return res.end();
      });
      this.http = this.app.listen(Config.httpPort);
      return {
        app: this.app,
        http: this.http,
        socket: this.socket
      };
    },
    stop: function() {
      this.socket.close();
      this.http.close();
      this.http = null;
      this.app = null;
      return this.socket = null;
    }
  };

}).call(this);
