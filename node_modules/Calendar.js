var CalDB 	= require('DB.Modules/Calendar'),
	j 		= require('jade'),
	v 		= require('Validate-alpha');
/*
 * Calendar Module
 */
Calendar = {
	months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	fillYears: function(){
		var today 		= new Date(),
			thisYear 	= today.getFullYear(),
			selectYear 	= doc.selectDate.selectYear,
			html 		= "";
		for (var i=thisYear-4; i<thisYear+11; i++) {
			 html += "<option value='"+i+"'>"+i+"</option>";
		}
		selectYear.innerHTML = html;
	},
	getFirstDay: function(theYear, theMonth){
		var firstDate = new Date(theYear,theMonth,1);
		return firstDate.getDay();
	},
	getMonthLen: function(theYear, theMonth){
		return new Date(theYear, theMonth +1, 0).getDate();
	},
	prevCal: function(theMonth, theYear){
		theMonth--;
		if (theMonth < 0) {
			theMonth = 11;
			theYear--;
		}
		this.drawCal(theMonth, theYear);
	},
	nextCal: function(theMonth, theYear){
		theMonth++;
		if (theMonth > 11) {
			theMonth = 0;
			theYear++;
		}
		this.drawCal(theMonth, theYear);
	},
	currCal: function(){
		var currDate = new Date();
		theMonth = currDate.getMonth();
		theYear = currDate.getFullYear();
		this.drawCal(theMonth, theYear);
	},
	drawCal: function(theMonth, theYear){
		var getAllDates = "SELECT date, (SELECT COUNT(date_from) FROM events WHERE events.deleted IS NULL AND DATE(events.date_from) = T.date) AS count FROM (SELECT DISTINCT DATE(events.date_from) AS date FROM events) AS T WHERE T.date LIKE '"+theYear+"-"+CalDB.pad(theMonth+1, 2)+"%' ORDER BY date",
			firstDay 	= this.getFirstDay(theYear, theMonth),
			howMany 	= this.getMonthLen(theYear, theMonth),
			dayCounter 	= 1,
			calBody 	= doc.getElementById('calDates'),
			calHead		= doc.getElementById('calTitle'),
			newLi 		= "",
			end 		= 1;
		// set hidden inputs to use in other buttons
		doc.getElementById('currMonth').value= theMonth;
		doc.getElementById('currYear').value = theYear;
		// update input Months
		doc.selectDate.selectMonth.selectedIndex = theMonth;
		// update input Years
		for (var i=0, n=doc.selectDate.selectYear.options; i<n.length; i++) {
			if (n[i].value == theYear) {
				doc.selectDate.selectYear.selectedIndex = i;
				break;
			}
		};
		// calculate num of Li's that will be generated
		if (firstDay+howMany == 28) end = 28;
		if (firstDay+howMany > 28 && firstDay+howMany <= 35) end = 35;
		if (firstDay+howMany > 35 && firstDay+howMany <= 42) end = 42;
		// reset html
		calBody.innerHTML = "";
		// set header title
		calHead.innerHTML = this.months[theMonth] + " " + theYear;
		
		// draw calendar
		CalDB.global(getAllDates, [], function(rows){
			// console.log(rows);
			for (var i=1, n='', c='no dates', clas=''; i<=end; i++) {
				if (i <= firstDay) newLi += "<li class='mask'></li>";
				else if(i > firstDay && i <= howMany+firstDay){
					n = theYear+'-'+CalDB.pad(theMonth+1, 2)+'-'+CalDB.pad(dayCounter, 2);
					for (var z=0; z<rows.length; z++) {
						if(rows[z].hasOwnProperty('date') && rows[z]['date'] === n && rows[z]['count'] > 0) {
							if (rows[z].count == 1) {
								c = rows[z].count + " date";
							};
							if (rows[z].count > 1) {
								c = rows[z].count + " dates";
							};
							clas=' day-on';
							break;
						} else {
							c = 'no dates';
							clas='';
						}
					};
					newLi += "<li class='day"+ clas +"'><span>"+ c +"</span><span onclick='Calendar.getDates("+ theYear +", "+ theMonth +", "+ dayCounter +");' data-d='' data-m='' data-y='' class='cal-link'>"+ dayCounter +"</span></li>";
					dayCounter++;
				} else if(i >= howMany+firstDay) newLi += "<li class='mask'></li>";
			};
			// set new calendar
			calBody.innerHTML = newLi;
		});
	},
	newDate: function(patientName, id){
		var sql = "SELECT id, name FROM sessions WHERE deleted IS NULL; SELECT id, name FROM beds WHERE deleted IS NULL";
		CalDB.global(sql, [], function(rows){
			var opt = {
				patientName: patientName,
				pid: id,
				sessions: rows[0],
				beds: rows[1]
			},
			html = j.renderFile('./assets/views/calendar/newDate.jade', opt);
			doc.getElementById('newDate').innerHTML = html;
			if (window.jQuery) {
				window.jQuery('#end').timepicker();
				window.jQuery('#start').timepicker();
			};
		});
	},
	getDates: function(year, month, day){
		var date = year+"-"+CalDB.pad(month+1, 2)+"-"+CalDB.pad(day, 2),
			sql = "SELECT events.id AS id, patients.name AS Pname, beds.name AS Bname, sessions.name AS Sname, DATE_FORMAT(events.date_from, '%H:%i:%s') AS date_from, DATE_FORMAT(events.date_to, '%H:%i:%s') AS date_to FROM events LEFT JOIN patients ON events.patient_id = patients.id LEFT JOIN beds ON events.bed_id = beds.id LEFT JOIN sessions ON events.session_id = sessions.id WHERE events.deleted IS NULL AND events.date_from LIKE '"+ date +"%'";
		CalDB.global(sql, [], function(rows){
			var opt = {rows: rows};
				html = j.renderFile('./assets/views/calendar/datesTable.jade', opt);
			doc.getElementById('datesTable').innerHTML = html;
			doc.getElementById('currDay').value = day;
			Calendar.showPopup(date);
		});
	},
	addDate: function(){
		// collect data
		var data = {
			from: 	doc.getElementById('start').value,
			to: 	doc.getElementById('end').value,
		},
		// validate data
		val = {
			from: 	['required', 'time'],
			to: 	['required', 'time']
		};
		v.make(data, val, function(errors){
			var keys = Object.keys(errors),
				length = keys.length;
			if (length) {
				var html = "";
				for (var i=0; i < length; i++) {
					html += "<h3>"+ keys[i] +"</h3>";
					html += "<ul>";
						for (var z=0; z < errors[keys[i]].length; z++) {
							html += "<li>"+ errors[keys[i]][z] +"</li>";
						};
					html += "</ul>";
				};
				HCalert({
					type: "error", // success, updated, error
					headerText: "Added Failed",
					bodyContent: html,
					hide: function(){}
				});
			} else {
				var year = doc.getElementById('currYear').value,
					month = doc.getElementById('currMonth').value,
					day = doc.getElementById('currDay').value,
					sqlDate = year+'-'+CalDB.pad( Number(month)+1, 2 )+'-'+CalDB.pad( day, 2 )+' ',
				newDate = {
					patient_id: doc.getElementById('pid').value,
					bed_id: 	doc.getElementById('Bname').value,
					session_id: doc.getElementById('Sname').value,
					date_from: 	sqlDate + data.from,
					date_to: 	sqlDate + data.to,
					created_at: CalDB.currentDateTime()
				};
				CalDB.create(newDate, function(){
					Calendar.getDates(Number(year), Number(month), Number(day));
					Calendar.drawCal(Number(month), Number(year));
					HCalert({
						type: "success", // success, updated, error
						headerText: "Date Added",
						bodyContent: "<p>a new date added successfully to the system</p>",
						hide: function(){}
					});
				});
			}
		});
	},
	deleteDate: function(id){
		HCalert({
			type: "error", // success, updated, error
			headerText: "Deleted Date",
			bodyContent: "<p>are you sure you want to delete this date.</p><p>you can't undo this operation!!</p>",
			hide: function(){},
			ok: function(){
				CalDB.softDelete(id, function(affected){
					if(affected > 0){
						HCalert({
							type: "success", // success, updated, error
							headerText: "Date Deleted",
							bodyContent: "<p>the date has been deleted successfully.</p>",
							hide: function(){}
						});
						Calendar.getDates(Number(doc.getElementById('currYear').value), Number(doc.getElementById('currMonth').value), Number(doc.getElementById('currDay').value));
						Calendar.drawCal(Number(doc.getElementById('currMonth').value), Number(doc.getElementById('currYear').value));
					} else {
						HCalert({
							type: "error", // success, updated, error
							headerText: "Deleted Falied",
							bodyContent: "<p>the date can't be deleted.. try again or contact support.</p>",
							hide: function(){}
						});
					}
				});
			}
		});
	},
	showPopup: function(date){
		doc.getElementById('calPopupTitle').innerHTML = 'Dates for ('+ date +')';
		doc.getElementById('calPopup').style.display = 'flex';
	},
	hidePopup: function(){
		doc.getElementById('calPopup').style.display = 'none';
	}
}
module.exports = Calendar;
