/*
 * Routes Engine
 */

// auto include controllers
var path = __dirname+ "/Controllers/";
c = {};
require("fs").readdirSync(path).forEach(function(file) {
	c[ file.slice(0, -3) ] = require("Controllers/" + file);
});
var pag = require('Pagination');

// routes class
var Routes = function (name, options){
	switch(name) {
		// app Login routes
		case 'app-get-login': c.UserController.getLogin(options); break;
		case 'app-post-login': c.UserController.postLogin(); break;
		case 'app-user-profile': c.UserController.profile(options); break;

		// static pages routes
		case 'about-page': c.PageController.about(); break;
		case 'license-page': c.PageController.license(); break;
		case 'help-page': c.PageController.help(); break;
		case 'options-page': c.OptionController.getOptions(); break;

		// app main sections routes
		case 'app-home': c.PageController.home(options); break;
		case 'app-patients': c.PageController.patients(); break;
		case 'app-admin': c.PageController.admin(); break;
		case 'app-accounts': c.PageController.accounts(); break;
		case 'app-reports': c.PageController.reports(); break;

		// Calendar
		case 'calendar': c.CalendarController.getCal(options); break;

		// Patients routes
		case 'patients-all': c.PatientController.all(options); break;
		case 'patients-profile': c.PatientController.profile(options); break;
		case 'patients-update': c.PatientController.update(options); break;
		case 'patients-add': c.PatientController.getCreate(options); break;
		case 'patients-add-post': c.PatientController.postCreate(options); break;
		case 'patients-remove': c.PatientController.remove(options); break;
		
		// Booking routes
		case 'booking-all': c.BookingController.all(options); break;
		case 'booking-profile': c.BookingController.profile(options); break;
		case 'booking-update': c.BookingController.update(options); break;
		case 'booking-add': c.BookingController.getCreate(options); break;
		case 'booking-add-post': c.BookingController.postCreate(options); break;
		case 'booking-remove': c.BookingController.remove(options); break;

		// admin routes
		case 'employees-all': c.UserController.all(options); break;
		case 'employees-archive': c.UserController.archive(options); break;
		case 'employee-profile': c.UserController.profile(options); break;
		case 'employee-update': c.UserController.update(options); break;
		case 'employee-add': c.UserController.getCreate(options); break;
		case 'employee-add-post': c.UserController.postCreate(options); break;
		case 'employee-deactivate': c.UserController.deactivate(options); break;
		case 'employee-remove': c.UserController.remove(options); break;

		// options routes
		case 'app-options-global': c.OptionController.global(); break;
		case 'app-options-roles': c.OptionController.all(); break;
		case 'app-options-add-role': c.OptionController.getCreate(options); break;
		case 'app-options-add-role-post': c.OptionController.postCreate(); break;
		case 'app-options-profile': c.OptionController.profile(options); break;
		case 'app-options-update': c.OptionController.update(options); break;
		case 'app-options-remove': c.OptionController.remove(options); break;

		// Diet routes
		case 'diets-all': c.DietController.all(options); break;
		case 'diets-add': c.DietController.getAdd(options); break;
		case 'diets-add-post': c.DietController.postAdd(options); break;
		case 'diets-profile': c.DietController.profile(options); break;
		case 'diets-update': c.DietController.update(options); break;
		case 'diets-remove': c.DietController.remove(options); break;

		// Group routes
		case 'groups-all': c.GroupController.all(options); break;
		case 'groups-add': c.GroupController.getAdd(options); break;
		case 'groups-add-post': c.GroupController.postAdd(options); break;
		case 'groups-profile': c.GroupController.profile(options); break;
		case 'groups-update': c.GroupController.update(options); break;
		case 'groups-remove': c.GroupController.remove(options); break;

		// Machines routes
		case 'machines-all': c.MachineController.all(options); break;
		case 'machines-add': c.MachineController.getAdd(options); break;
		case 'machines-add-post': c.MachineController.postAdd(options); break;
		case 'machines-profile': c.MachineController.profile(options); break;
		case 'machines-update': c.MachineController.update(options); break;
		case 'machines-remove': c.MachineController.remove(options); break;

		// Categories routes
		case 'categories-all': c.CategoryController.all(options); break;
		case 'categories-add-post': c.CategoryController.postAdd(options); break;
		case 'categories-profile': c.CategoryController.profile(options); break;
		case 'categories-update': c.CategoryController.update(options); break;
		case 'categories-remove': c.CategoryController.remove(options); break;

		// Sessions routes
		case 'sessions-all': c.SessionController.all(options); break;
		case 'sessions-add': c.SessionController.getAdd(options); break;
		case 'sessions-add-post': c.SessionController.postAdd(options); break;
		case 'sessions-profile': c.SessionController.profile(options); break;
		case 'sessions-update': c.SessionController.update(options); break;
		case 'sessions-remove': c.SessionController.remove(options); break;

		// Beds routes
		case 'beds-all': c.BedController.all(options); break;
		case 'beds-add-post': c.BedController.postAdd(options); break;
		case 'beds-profile': c.BedController.profile(options); break;
		case 'beds-update': c.BedController.update(options); break;
		case 'beds-deactivate': c.BedController.deactivate(options); break;
		case 'beds-reactivate': c.BedController.reactivate(options); break;
		case 'beds-remove': c.BedController.remove(options); break;

		// Accounts
		case 'store-measurement': c.StoreController.measurementUnits(options); break;
		case 'store-inventory': c.StoreController.inventoryItems(options); break;

		case 'purchasing-suppliers': c.PurchaseController.suppliers(options); break;
		case 'purchasing-invoice': c.PurchaseController.add(options); break;
		case 'purchasing-invoices': c.PurchaseController.all(options); break;
		
		case 'cost-items': c.CostController.items(options); break;
		case 'cost-invoice': c.CostController.add(options); break;
		case 'cost-invoices': c.CostController.all(options); break;

		case 'groups-invoices': c.GroupsInvoicesController.invoices(options); break;

		// app 404 Not Found route 
		default: console.log("page \""+ name +"\" not found"); break;
	}
};
module.exports = Routes;
