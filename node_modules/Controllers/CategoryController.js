var Categories 	= require('DB.Modules/Categories'),
	v 			= require('Validate-alpha'),
	layout 		= require('Layout');
/*
 * Diet Controller
 */
CategoryController = {
	all: function(options){
		if (!options) options = {};
		Categories.where('deleted IS NULL', 10, function(opt){
			opt.routeName = "categories-all";
			if('inputs' in options) opt.inputs = options.inputs;
			if('errors' in options) opt.errors = options.errors;
			layout.LoadContent('categories/categories', opt);
		});
	},
	postAdd: function(){
		// collect data
		var data = {
			name : doc.getElementById('groupName').value
		},

		// validate data
		val = {
			name: ['required', 'alphanum', 'min:3', 'unique:categories,name']
		};
		v.make(data, val, function(errors){
			var keys = Object.keys(errors),
				length = keys.length;
			if (length) {
				var html = "";
				for (var i=0; i < length; i++) {
					html += "<h3>"+ keys[i] +"</h3>";
					html += "<ul>";
						for (var z=0; z < errors[keys[i]].length; z++) {
							html += "<li>"+ errors[keys[i]][z] +"</li>";
						};
					html += "</ul>";
				};
				var options = {
					inputs: data,
					errors: errors
				};
				redirect('categories-all', options);
				HCalert({
					type: "error", // success, updated, error
					headerText: "Added Failed",
					bodyContent: html,
					hide: function(){}
				});
			} else {
				// save data
				var obj = {
					name : data.name,
					created_at: Categories.currentDateTime(),
					updated_at: Categories.currentDateTime()
				};
				redirect('categories-all');
				Categories.create(obj, function(newId){
					HCalert({
						type: "success", // success, updated, error
						headerText: "Category Added",
						bodyContent: "<p>a new category ("+ data.name +") added to the system Successfully.</p>",
						hide: function(){}
					});
				});
			}
		});
	},
	profile: function(options){
		Categories.find(options.id, function(rows){
			options.data = rows[0];
			layout.LoadContent('categories/profile', options);
		});

	},
	update: function(options){
		// collect data
		var data = {
			name : doc.getElementById('categoryName').value
		},

		// validate data
		val = {
			name: ['required', 'alphanum', 'min:3', 'unique:categories,name,'+ options.id]
		};
		v.make(data, val, function(errors){
			var keys = Object.keys(errors),
				length = keys.length;
			if (length) {
				var html = "";
				for (var i=0; i < length; i++) {
					html += "<h3>"+ keys[i] +"</h3>";
					html += "<ul>";
						for (var z=0; z < errors[keys[i]].length; z++) {
							html += "<li>"+ errors[keys[i]][z] +"</li>";
						};
					html += "</ul>";
				};
				var retrn = {
					inputs: data,
					errors: errors,
					id: options.id
				};
				redirect('categories-profile', retrn);
				HCalert({
					type: "error", // success, updated, error
					headerText: "Updated Failed",
					bodyContent: html,
					hide: function(){}
				});
			} else {
				// save data
				var obj = {
					name : data.name,
					updated_at: Categories.currentDateTime()
				};
				Categories.update(options.id, obj, function(affectedId){
					HCalert({
						type: "success", // success, updated, error
						headerText: "Category Updated",
						bodyContent: "<p>category ("+ data.name +") Updated Successfully.</p>",
						hide: function(){}
					});
				});
			}
		});
	},
	remove: function(options){
		HCalert({
			type: "error", // success, updated, error
			headerText: "Deleteing Category",
			bodyContent: "<p>are you sure you want to delete this Category!!</p><p>you CAN'T undo this operation!!!</p>",
			hide: function(){},
			ok: function(){
				Categories.softDelete(options.id, function(affecedId){
					redirect('categories-all');
					HCalert({
						type: "success", // success, updated, error
						headerText: "Category Deleted",
						bodyContent: "<p>category deleted from the system Successfully.</p>",
						hide: function(){}
					});
				});
			}
		});
	}
}
module.exports = CategoryController;
