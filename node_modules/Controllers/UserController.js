/*
 * User Controller
 */
var Users 	= require('DB.Modules/Users'),
	Roles 	= require('DB.Modules/Roles'),
	gui 	= global.window.nwDispatcher.requireNwGui(),
	layout 	= require('Layout'),
	v 		= require('Validate-alpha'),
	bcrypt 	= require('bcryptjs');

var UserController = {
	currentUser: {},
	getLogin: function(options){
		var options = options || {};
		layout.Load('login', options);
	},
	postLogin: function(){
		// collect data
		var user = {
			username: doc.getElementById('username').value,
			password: doc.getElementById('password').value
		},
		// validation
		methods = {
			username: ['required'],
			password: ['required']
		};
		v.make(user, methods, function(errors){
			var keys = Object.keys(errors),
				length = keys.length;
			if (length) {
				var html = "";
				for (var i=0; i < length; i++) {
					html += "<h3>"+ keys[i] +"</h3>";
					html += "<ul>";
						for (var z=0; z < errors[keys[i]].length; z++) {
							html += "<li>"+ errors[keys[i]][z] +"</li>";
						};
					html += "</ul>";
				};
				var options = {
					inputs: user,
					errors: errors
				};
				redirect('app-get-login', options);
				HCalert({
					type: "error", // success, updated, error
					headerText: "Log in Failed",
					bodyContent: html,
					hide: function(){}
				});
			} else {
				// check if user data matched DB
				Users.exist(user.username, user.password, function(userDetails){
					if (userDetails) {
						// create currentUser object
						UserController.currentUser = userDetails;
						// login and save cookies
						gui.Window.get().cookies.set({
							url		: "file://"+ __dirname.slice(0, -24) +"assets/views/layout/login-page.html",
							name	: "userDetails",
							value 	: JSON.stringify(userDetails)
						});
						// redirect
						redirect('app-home', {currentUserIid: userDetails.id});
					} else {
						HCalert({
							type: "error", // success, updated, error
							headerText: "Log in Failed",
							bodyContent: "username OR password is Incorrect",
							hide: function(){}
						});
					};
				});
			};
		});
	},
	profile: function(option){
		var sql = "SELECT users.*, roles.name AS Rname FROM users LEFT JOIN roles ON users.role_id = roles.id WHERE users.id = ?";
		Users.global(sql, [option.id], function(data){
			var options = {
				user: {
					title: data[0].first_name +" "+ data[0].last_name,
					role : data[0].Rname,
					name : data[0].username,
					fname: data[0].first_name,
					lname: data[0].last_name,
					phone: data[0].phone,
					addon: data[0].created_at,
					updon: data[0].updated_at,
					id 	 : data[0].id,
					type : data[0].archive
				}
			}
			options.inputs = 'inputs' in option ? option.inputs : {};
			options.errors = 'errors' in option ? option.errors : {};
			if ( UserController.currentUser.id == data[0].id) {
				layout.Columns();
				layout.LoadSidebar('admin');
				layout.LoadContent('users/profile', options);
			} else {
				layout.LoadContent('users/profile', options);
			};
		});
	},
	getCreate: function(options){
		Roles.all('', function(opt){
			options.groups = opt;
			layout.LoadContent('users/add', options);
		});
	},
	postCreate: function(){
		// collect data
		var newUserData = {
			first_name: 	doc.getElementById('employeeFirstName').value,
			last_name: 		doc.getElementById('employeeLastName').value,
			username: 		doc.getElementById('employeeUsername').value,
			phone: 			doc.getElementById('employeePhone').value,
			role: 			doc.getElementById('roleId').value,
			password: 		doc.getElementById('employeePass').value,
			password_again: doc.getElementById('employeePassAgain').value
		},
		// validate object
		methods = {
			first_name: 	['required', 'alpha', 'min:3'],
			last_name: 		['required', 'alpha', 'min:3'],
			username: 		['required', 'alphanum', 'min:3', 'unique:users,username'],
			phone: 			['required', 'numaric', 'unique:users,phone'],
			role: 			['required', 'numaric'],
			password: 		['required', 'alphanum', 'min:6'],
			password_again: ['required', 'confirmed:password', 'min:6']
		};
		// errors array
		v.make(newUserData, methods, function(errors){
			var keys = Object.keys(errors),
				length = keys.length;
			if (length) {
				var html = "";
				for (var i=0; i < length; i++) {
					html += "<h3>"+ keys[i] +"</h3>";
					html += "<ul>";
						for (var z=0; z < errors[keys[i]].length; z++) {
							html += "<li>"+ errors[keys[i]][z] +"</li>";
						};
					html += "</ul>";
				};
				var options = {
					inputs: newUserData,
					errors: errors
				};
				redirect('employee-add', options);
				HCalert({
					type: "error", // success, updated, error
					headerText: "Failed to Create New Employee",
					bodyContent: html,
					hide: function(){}
				});
			} else {
				// object to send to DB
				var obj = {
					username: newUserData.username,
					first_name: newUserData.first_name,
					last_name: newUserData.last_name,
					phone: newUserData.phone,
					role_id: newUserData.role,
					created_at: Users.currentDateTime(),
					updated_at: Users.currentDateTime()
				}
				bcrypt.hash(newUserData.password, 8, function(err, hash) {
					obj.password = hash;
					// create new user
					Users.create(obj, function(id){
						if (typeof id === "number") {
							HCalert({
								type: "success", // success, updated, error
								headerText: "New Employee added",
								bodyContent: "<p>a new employee has been added to system successfully</p>",
								hide: function(){}
							});
						};
					});
				});
			}
		});
	},
	update: function(){
		// collect data
		var id = doc.getElementById('delete').getAttribute("data-id"),
		userData = {
			first_name: 	doc.getElementById('userFirstName').value,
			last_name: 		doc.getElementById('userLastName').value,
			phone: 			doc.getElementById('userPhone').value,
			password: 		doc.getElementById('userPass').value,
			password_again: doc.getElementById('userPassAgain').value
		},

		// validate pbject
		methods = {
			first_name: 	['required', 'alpha', 'min:3'],
			last_name: 		['required', 'alpha', 'min:3'],
			phone: 			['required', 'numaric', 'unique:users,phone,'+ id],
			password_again: ['confirmed:password']
		};

		// validate data
		v.make(userData, methods, function(errors){
			var keys = Object.keys(errors),
				length = keys.length;
			if (length) {
				var html = "";
				for (var i=0; i<length; i++) {
					html += "<h3>"+ keys[i] +"</h3>";
					html += "<ul>";
						for (var z=0; z < errors[keys[i]].length; z++) {
							html += "<li>"+ errors[keys[i]][z] +"</li>";
						};
					html += "</ul>";
				};
				var options = {
					inputs: userData,
					errors: errors,
					id: id
				};
				redirect('employee-profile', options);
				HCalert({
					type: "error", // success, updated, error
					headerText: "Failed to Update Employee",
					bodyContent: html,
					hide: function(){}
				});
			} else {
				// save data
				var obj = {}
				obj.first_name 	= userData.first_name;
				obj.last_name 	= userData.last_name;
				obj.phone 		= userData.phone;
				obj.updated_at 	= Users.currentDateTime();

				if (userData.password) {
					obj.password = pass;
				};

				Users.update(id, obj, function(affectedRows){
					if (affectedRows > 0) {
						// success
						HCalert({
							type: "success", // success, updated, error
							headerText: "Employee Updated",
							bodyContent: "<p>the employee has updated successfully</p>",
							hide: function(){}
						});
					} else {
						// error
						HCalert({
							type: "error", // success, updated, error
							headerText: "Failed to Update",
							bodyContent: "<p>failed to update the employee</p><p>please try again or contact the support</p>",
							hide: function(){}
						});
					};
				});
			}
		});
	},
	remove: function(options){
		HCalert({
			type: "error", // success, updated, error
			headerText: "Delete Employee",
			bodyContent: "<p>you are about to Remove an Employee from the system</p><br><p>are YOU SURE !!!</p>",
			hide: function(){},
			ok: function(){
				Users.delete(options.id, function(affectedRows){
					if (affectedRows > 0) {
						redirect('employees-all');
						HCalert({
							type: "success", // success, updated, error
							headerText: "Employee Deleted",
							bodyContent: "<p>an employee and all his data are deleted successfully</p>",
							hide: function(){}
						});
					} else {
						HCalert({
							type: "error", // success, updated, error
							headerText: "Deleted Failed",
							bodyContent: "<p>can't delete the employee</p><p>try again or contact the support</p>",
							hide: function(){}
						});
					};
				});
			}
		});
	},
	deactivate: function(options){
		if (options.type == "archive") {
			HCalert({
				type: "error", // success, updated, error
				headerText: "Archive Employee",
				bodyContent: "<p>you are about to Archive an Employee</p><p>this employee will NOT show in any page except from archive Page and all his data will be out of displaying</p><br><p>are YOU SURE !!!</p>",
				hide: function(){},
				ok: function(){
					var obj = {
						archive: 1
					}
					Users.update(options.id, obj, function(affectedRows){
						if (affectedRows > 0) {
							redirect('employees-all');
							HCalert({
								type: "success", // success, updated, error
								headerText: "Employee Archived",
								bodyContent: "<p>an employee and all his data are moved to achive</p>",
								hide: function(){}
							});
						} else {
							HCalert({
								type: "error", // success, updated, error
								headerText: "Archived Failed",
								bodyContent: "<p>can't archive the employee</p><p>try again or contact the support</p>",
								hide: function(){}
							});
						};
					});
				}
			});
		} else if (options.type == "reactivate") {
			HCalert({
				type: "error", // success, updated, error
				headerText: "Reactivate Employee",
				bodyContent: "<p>you are about to Reactivate an Employee</p><p>this employee will return to the system.</p><br><p>are YOU SURE !!!</p>",
				hide: function(){},
				ok: function(){
					var obj = {
						archive: 'NULL'
					}
					Users.update(options.id, obj, function(affectedRows){
						if (affectedRows > 0) {
							redirect('employees-archive');
							HCalert({
								type: "success", // success, updated, error
								headerText: "Employee Reactivated",
								bodyContent: "<p>an employee and all his data are Reactivated</p>",
								hide: function(){}
							});
						} else {
							HCalert({
								type: "error", // success, updated, error
								headerText: "Reactivate Failed",
								bodyContent: "<p>can't reactivate the employee</p><p>try again or contact the support</p>",
								hide: function(){}
							});
						};
					});
				}
			});
		};
	},
	all: function(){
		Users.where("archive = 0 AND id != "+ this.currentUser.id, 4, function(opt){
			opt.routeName = "employees-all";
			opt.title = "All Employees";
			opt.type  = "all";
			layout.LoadContent('users/all', opt);
		});
	},
	archive: function(){
		Users.where("id != "+ this.currentUser.id, 4, function(opt){
			opt.routeName = "employees-archive";
			opt.title = "Employees Archive";
			opt.type  = "archive";
			layout.LoadContent('users/all', opt);
		});
	}
}
module.exports = UserController;
