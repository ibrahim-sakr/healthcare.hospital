var Beds 	= require('DB.Modules/Beds'),
	v 		= require('Validate-alpha'),
	layout 	= require('Layout');
/*
 * Diet Controller
 */
BedController = {
	all: function(options){
		auth('showBeds', function(){
			if (!options) options = {};
			Beds.where('deleted IS NULL', 10, function(opt){
				opt.routeName = "beds-all";
				if('inputs' in options) opt.inputs = options.inputs;
				if('errors' in options) opt.errors = options.errors;
				layout.LoadContent('beds/all', opt);
			});
		});
	},
	postAdd: function(){
		auth('addBeds', function(){
			// collect data
			var data = {
				name : doc.getElementById('newBed').value
			},

			// validate data
			val = {
				name: ['required', 'alphanum', 'min:3', 'unique:beds,name']
			};
			v.make(data, val, function(errors){
				var keys = Object.keys(errors),
					length = keys.length;
				if (length) {
					var html = "";
					for (var i=0; i < length; i++) {
						html += "<h3>"+ keys[i] +"</h3>";
						html += "<ul>";
							for (var z=0; z < errors[keys[i]].length; z++) {
								html += "<li>"+ errors[keys[i]][z] +"</li>";
							};
						html += "</ul>";
					};
					var options = {
						inputs: data,
						errors: errors
					};
					redirect('beds-all', options);
					HCalert({
						type: "error", // success, updated, error
						headerText: "Added Failed",
						bodyContent: html,
						hide: function(){}
					});
				} else {
					// save data
					var obj = {
						name : data.name,
						created_at: Beds.currentDateTime(),
						updated_at: Beds.currentDateTime()
					};
					redirect('beds-all');
					Beds.create(obj, function(newId){
						HCalert({
							type: "success", // success, updated, error
							headerText: "Bed Added",
							bodyContent: "<p>a new bed ("+ data.name +") added to the system Successfully.</p>",
							hide: function(){}
						});
					});
				}
			});
		});
	},
	profile: function(options){
		Beds.find(options.id, function(rows){
			options.data = rows[0];
			layout.LoadContent('beds/profile', options);
		});
	},
	update: function(options){
		// collect data
		var data = {
			name : doc.getElementById('newBed').value
		},

		// validate data
		val = {
			name: ['required', 'alphanum', 'min:3', 'unique:beds,name,'+ options.id]
		};
		v.make(data, val, function(errors){
			var keys = Object.keys(errors),
				length = keys.length;
			if (length) {
				var html = "";
				for (var i=0; i < length; i++) {
					html += "<h3>"+ keys[i] +"</h3>";
					html += "<ul>";
						for (var z=0; z < errors[keys[i]].length; z++) {
							html += "<li>"+ errors[keys[i]][z] +"</li>";
						};
					html += "</ul>";
				};
				var retrn = {
					inputs: data,
					errors: errors,
					id: options.id
				};
				redirect('beds-profile', retrn);
				HCalert({
					type: "error", // success, updated, error
					headerText: "Updated Failed",
					bodyContent: html,
					hide: function(){}
				});
			} else {
				// save data
				var obj = {
					name : data.name,
					updated_at: Beds.currentDateTime()
				};
				Beds.update(options.id, obj, function(affectedId){
					HCalert({
						type: "success", // success, updated, error
						headerText: "Beds Updated",
						bodyContent: "<p>bed ("+ data.name +") Updated Successfully.</p>",
						hide: function(){}
					});
				});
			}
		});
	},
	deactivate: function(options){
		auth('deactivateBeds', function(){
			HCalert({
				type: "error", // success, updated, error
				headerText: "Deactivate Bed",
				bodyContent: "<p>are you sure you want to Deactivate this Bed!!</p><p>it NOT will be shown in other places!!</p>",
				hide: function(){},
				ok: function(){
					var bed = {
						active: 0,
						updated_at: Beds.currentDateTime()
					};
					Beds.update(options.id, bed, function(affecedId){
						redirect('beds-profile', options);
						HCalert({
							type: "success", // success, updated, error
							headerText: "Bed Deactivated",
							bodyContent: "<p>bed deactivated Successfully.</p>",
							hide: function(){}
						});
					});
				}
			});
		});
	},
	reactivate: function(options){
		HCalert({
			type: "error", // success, updated, error
			headerText: "Reactivate Bed",
			bodyContent: "<p>are you sure you want to Reactivate this Bed!!</p>",
			hide: function(){},
			ok: function(){
				var bed = {
					active: 1,
					updated_at: Beds.currentDateTime()
				};
				Beds.update(options.id, bed, function(affecedId){
					redirect('beds-profile', options);
					HCalert({
						type: "success", // success, updated, error
						headerText: "Bed Reactivated",
						bodyContent: "<p>bed reactivated Successfully.</p>",
						hide: function(){}
					});
				});
			}
		});
	},
	remove: function(options){
		auth('delete_beds', function(){
			HCalert({
				type: "error", // success, updated, error
				headerText: "Deleteing Bed",
				bodyContent: "<p>are you sure you want to delete this Bed!!</p><p>you CAN'T undo this operation!!!</p>",
				hide: function(){},
				ok: function(){
					Beds.softDelete(options.id, function(affecedId){
						redirect('beds-all');
						HCalert({
							type: "success", // success, updated, error
							headerText: "Bed Deleted",
							bodyContent: "<p>bed deleted from the system Successfully.</p>",
							hide: function(){}
						});
					});
				}
			});
		});
	}
}
module.exports = BedController;
