/*
 * Static Pages Controller
 */
var layout 	= require('Layout'),
	Roles 	= require('DB.Modules/Roles'),
	Permissions = require('DB.Modules/Permissions'),
	v 		= require('Validate-alpha');

var OptionController = {
	getOptions: function(){
		layout.Columns();
		layout.LoadSidebar('option');
		layout.LoadContent('options/global');
	},
	global: function(){
		layout.LoadContent('options/global');
	},
	all: function(){
		Roles.where('deleted IS NULL', 5, function(data){
			data.routeName = "app-options-roles";
			layout.LoadContent('options/all', data);
		});
	},
	getCreate: function(options){
		Permissions.all('', function(data){
			options['data'] = data;
			layout.LoadContent('options/add', options);
			if ( options.inputs ) {
				console.log(options.inputs);
			};
		});
	},
	postCreate: function(){
		// collect data
		var elements = [],
			perm = [];
		for (var i=0, e=doc.getElementsByClassName('permission'); i < e.length ; i++) {
			if (e[i].checked) {
				elements.push(e[i]);
				perm.push( e[i].getAttribute('value') );
			};
		};
		var data = {
			name: 		doc.getElementById('roleName').value,
			permissions:elements
		},
		// validate data
		obj = {
			name: 		['required', 'min:3', 'unique:roles,name'],
			permissions:['length:1']
		};
		v.make(data, obj, function(errors){
			var keys = Object.keys(errors),
				length = keys.length;
			if (length) {
				var html = "";
				for (var i=0; i < length; i++) {
					html += "<h3>"+ keys[i] +"</h3>";
					html += "<ul>";
						for (var z=0; z < errors[keys[i]].length; z++) {
							html += "<li>"+ errors[keys[i]][z] +"</li>";
						};
					html += "</ul>";
				};
				var options = {
					inputs: {
						name: data.name,
						perm: perm
					},
					errors: errors
				};
				redirect('app-options-add-role', options);
				HCalert({
					type: "error", // success, updated, error
					headerText: "Adding Role Fails",
					bodyContent: html,
					hide: function(){}
				});
			} else {
				// save data
				var sql = "INSERT INTO roles (name, created_at, updated_at) VALUES (?, NOW(), NOW()); INSERT INTO role_permission (role_id, permission_id) VALUES ";
				var array = [data.name];
				for (i=0; i < data.permissions.length; i++) {
					sql += "(LAST_INSERT_ID(), ?), ";
					array.push(data.permissions[i].value);
				};
				Roles.global(sql.slice(0, -2), array, function(result){
					HCalert({
						type: "success", // success, updated, error
						headerText: "Role Added",
						bodyContent: "<p>new Role ("+ data.name +") added to the system</p>",
						hide: function(){}
					});
				});
			}
		});
	},
	profile: function(options){
		var sql = "SELECT * FROM roles WHERE id = ?; SELECT permission_id FROM role_permission WHERE role_id = ?; SELECT * FROM permissions";
		Roles.global(sql, [options.id, options.id], function(rows){
			var selected = [];
			for (i=0; i < rows[1].length; i++) {
				selected.push(rows[1][i].permission_id);
			};
			var opt = {
				role 	: rows[0],
				selected: selected,
				all		: rows[2]
			}
			layout.LoadContent('options/profile', opt);
		});
	},
	update: function(options){
		var name = doc.getElementById('roleName').value,
			element = doc.getElementsByClassName('permission'),
			id = options.id,
			array = [name, id, id],
			sql = "UPDATE roles SET name = ? WHERE id = ?; DELETE FROM role_permission WHERE role_id = ?; INSERT INTO role_permission (role_id, permission_id) VALUES ";
		for (i=0; i < element.length; i++) {
			if( element[i].checked ) {
				sql += "(?, ?), ";
				array.push(id, element[i].value);
			}
		};
		Roles.global(sql.slice(0, -2), array, function(result){
			if (result[0].affectedRows <= 0) {
				HCalert({
					type: "error", // success, updated, error
					headerText: "Updated Failed",
					bodyContent: "<p>can't update Role</p><p>please try again or contact support</p><p><small>can't update role name</small></p>",
					hide: function(){}
				});
			} else if(result[1].serverStatus != '42'){
				HCalert({
					type: "error", // success, updated, error
					headerText: "Updated Failed",
					bodyContent: "<p>can't update Role</p><p>please try again or contact support</p><p><small>can't remove old permissions</small></p>",
					hide: function(){}
				});
			} else if(result[2].affectedRows <= 0){
				HCalert({
					type: "error", // success, updated, error
					headerText: "Updated Failed",
					bodyContent: "<p>can't update Role</p><p>please try again or contact support</p><p><small>can't create new permissions</small></p>",
					hide: function(){}
				});
			} else {
				HCalert({
					type: "success", // success, updated, error
					headerText: "Role Updated",
					bodyContent: "<p>role ("+ name +") updated Successfully</p>",
					hide: function(){}
				});				
			}
		});
	},
	remove: function(options){
		HCalert({
			type: "error", // success, updated, error
			headerText: "Delete Role",
			bodyContent: "<p>you are about to Remove role from the system</p><br><p>are YOU SURE !!!</p>",
			hide: function(){},
			ok: function(){
				HCalert({
					type: "updated", // success, updated, error
					headerText: "Update Employees",
					bodyContent: "<div class='form-element'><label>update the employee with this role to</label><div class='form-input'><select name=' id='><option value='1'>role 1</option><option value='2'>role 2</option><option value='3'>role 3</option></select></div></div>",
					hideText: "delete them",
					hide: function(){
					},
					ok: function(){
						// Roles.update(options.id, {'deleted': 1}, function(affectedRows){
						// 	if (affectedRows > 0) {
						// 		redirect('app-options-roles');
						// 		HCalert({
						// 			type: "success", // success, updated, error
						// 			headerText: "Role Deleted",
						// 			bodyContent: "<p>Role Deleted Successfully</p>",
						// 			hide: function(){}
						// 		});
						// 	} else {
						// 		HCalert({
						// 			type: "error", // success, updated, error
						// 			headerText: "Deleted Failed",
						// 			bodyContent: "<p>can't delete role</p><p>try again or contact the support</p>",
						// 			hide: function(){}
						// 		});
						// 	};
						// });
					}
				});
			}
		});
	}
}
module.exports = OptionController;
