var Patients 	= require('DB.Modules/Patients'),
	v 			= require('Validate-alpha'),
	layout 		= require('Layout'),
	Calendar 	= require('Calendar');

/*
 * Booking Controller
 */
BookingController = {
	all: function(options){
		Patients.where('active = 0 AND deleted IS NULL', 10, function(opt){
			opt.routeName = "booking-all";
			layout.LoadContent('booking/all', opt);
		});
	},
	profile: function(options){
		// groups
		var sql = "SELECT patients.* FROM patients WHERE id = ? AND deleted IS NULL; SELECT groups.id, groups.name FROM groups WHERE deleted IS NULL",
			currDate = new Date(),
			theMonth = currDate.getMonth(),
			theYear = currDate.getFullYear();

		Patients.global(sql, [options.id], function(rows){
			options.data = rows[0][0];
			options.groups = rows[1];
			layout.LoadContent('booking/profile', options);
			Calendar.newDate(rows[0][0].name, rows[0][0].id);
			Calendar.fillYears();
			Calendar.drawCal(theMonth, theYear);
		});
	},
	getCreate: function(options){
		layout.LoadContent('booking/add', options);
	},
	postCreate: function(options){
		// collect data
		var data = {
			name: 			doc.getElementById('bookingName').value,
			age: 			doc.getElementById('bookingAge').value,
			gender: 		doc.getElementById('bookingGender').value,
			phone: 			doc.getElementById('bookingPhone').value,
			main_problem: 	doc.getElementById('bookingProblem').value
		},

		// validate data
		val = {
			name: 			['required', 'alpha', 'min:3'],
			age: 			['required', 'numaric'],
			phone: 			['required', 'numaric', 'unique:patients,phone'],
			main_problem: 	['required']
		};
		v.make(data, val, function(errors){
			var keys = Object.keys(errors),
				length = keys.length;
			if (length) {
				var html = "";
				for (var i=0; i < length; i++) {
					html += "<h3>"+ keys[i] +"</h3>";
					html += "<ul>";
						for (var z=0; z < errors[keys[i]].length; z++) {
							html += "<li>"+ errors[keys[i]][z] +"</li>";
						};
					html += "</ul>";
				};
				var options = {
					inputs: data,
					errors: errors
				};
				redirect('booking-add', options);
				HCalert({
					type: "error", // success, updated, error
					headerText: "Added Failed",
					bodyContent: html,
					hide: function(){}
				});
			} else {
				// save data
				var obj = {
					name: data.name,
					age: data.age,
					gender: data.gender,
					phone: data.phone,
					problem: data.main_problem,
					active: 0,
					created_at: Patients.currentDateTime(),
					updated_at: Patients.currentDateTime()
				},
				columns = "", values = [];
				for (var i=0, n=Object.keys(obj); i < n.length; i++) {
					columns += n[i] + ", ";
					values.push(obj[n[i]]);
				};

				var sql = "INSERT INTO patients ("+ columns.slice(0, -2) +") VALUES (?,?,?,?,?,?,?,?)";
				Patients.global(sql, values, function(){
					redirect('booking-add');
					HCalert({
						type: "success", // success, updated, error
						headerText: "Booking Added",
						bodyContent: "<p>booking for ("+data.name+") added successfully</p>",
						hide: function(){}
					});
				});
			}
		});
	},
	update: function(options){
		// collect data
		var data = {
			name: 				doc.getElementById('bookingName').value,
			age: 				doc.getElementById('bookingAge').value,
			phone: 				doc.getElementById('bookingPhone').value,
			gender: 			doc.getElementById('bookingGender').value,
			main_problem: 		doc.getElementById('bookingProblem').value,
			group: 				doc.getElementById('bookingGroup').value,
			address: 			doc.getElementById('bookingAddress').value,
			occupation: 		doc.getElementById('bookingOccupation').value,
			habits: 			doc.getElementById('bookingHabits').value,
			onset_of_treatment: doc.getElementById('bookingOnsetTreatment').value,
			onset: 				doc.getElementById('bookingOnset').value,
			course: 			doc.getElementById('bookingCourse').value,
			duration: 			doc.getElementById('bookingDuration').value,
			past_history: 		doc.getElementById('bookingPast').value,
			cash: 				doc.getElementById('bookingCash').value,
			confirm: 			doc.getElementById('bookingActivate').checked,
		};
		// validate data
		Patients.global("SELECT value FROM options WHERE name = ?", ['cash'], function(rows){
			val = {
				name: 			['required', 'min:3', 'alpha'],
				age: 			['required', 'numaric'],
				phone: 			['required', 'numaric', 'unique:patients,phone,'+ options.id],
				main_problem: 	['required'],
				duration: 		['numaric'],
			};
			if (data.confirm) {
				val.cash = 		['required', 'numaric', 'min:'+ rows[0].value];
			};
			v.make(data, val, function(errors){
				var keys = Object.keys(errors),
					length = keys.length;
				if (length) {
					var html = "";
					for (var i=0; i < length; i++) {
						html += "<h3>"+ keys[i] +"</h3>";
						html += "<ul>";
							for (var z=0; z < errors[keys[i]].length; z++) {
								html += "<li>"+ errors[keys[i]][z] +"</li>";
							};
						html += "</ul>";
					};
					var retrn = {
						inputs: data,
						errors: errors,
						id: options.id
					};
					redirect('booking-profile', retrn);
					HCalert({
						type: "error", // success, updated, error
						headerText: "Updated Failed",
						bodyContent: html,
						hide: function(){}
					});
				} else {
					// save data
					var obj = {
						name: 				data.name,
						age: 				data.age,
						phone: 				data.phone,
						gender: 			data.gender,
						problem: 			data.main_problem,
						group_id: 			data.group,
						address: 			data.address,
						occupation: 		data.occupation,
						habits: 			data.habits,
						onset_treatment: 	data.onset_of_treatment,
						onset: 				data.onset,
						course: 			data.course,
						duration: 			data.duration,
						past: 				data.past_history,
						updated_at: 		Patients.currentDateTime(),
						active: 			0,
					};
					if (data.confirm) {
						obj.active = 1;
					};
					Patients.update(options.id, obj, function(affectedRows){
						if (data.confirm) {
							redirect('patients-all');
							HCalert({
								type: "success", // success, updated, error
								headerText: "Booking Confirmed",
								bodyContent: "booking updated and confirmed successfully",
								hide: function(){}
							});
						} else {
							HCalert({
								type: "success", // success, updated, error
								headerText: "Booking Updated",
								bodyContent: "booking updated successfully",
								hide: function(){}
							});
						};
					});
				}
			});
		});
	},
	remove: function(options){
		HCalert({
			type: "error", // success, updated, error
			headerText: "Booking Delete",
			bodyContent: "<p>are you sure you want to Delete this Booking</p><p>you can't undo this operation !!!</p>",
			hide: function(){},
			ok: function(){
				data = {deleted: 1};
				Patients.update(options.id, data, function(data){
					if (data > 0) {
						// redirect to all patients
						redirect('booking-all');
						// show message
						HCalert({
							type: "success", // success, updated, error
							headerText: "Booking Deleted",
							bodyContent: "<p>booking deleted succssfully</p>",
							hide: function(){}
						});
					} else {

					};
				});
			}
		});
	},
}
module.exports = BookingController;
